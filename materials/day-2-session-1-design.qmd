---
title: "📦 <br>Building tidy tools"
subtitle: "Day 2 Session 1: Function Design"
author: "Emma Rand and Ian Lyttle"
date: "<br>🔗 [bit.ly/...](https://bit.ly/..)"
format:
  revealjs: 
    theme: [simple, emma.scss]
    slide-number: true
    chalkboard: true
    preview-links: auto
    footer: <https://bit.ly/..>
    margin: 0.07
    code-link: true
    code-line-numbers: false
execute:
  echo: true
  eval: false
bibliography: references.bib
---

# 👋 Welcome Back

## The Team

::: columns
::: {.column width="50%"}
Emma Rand 🐦[er13_r](https://twitter.com/er13_r?lang=en)

Elliot Murphy

Beatriz Milz
:::

::: {.column width="50%"}
Ian Lyttle 🐦[ijlyttle](https://twitter.com/ijlyttle?lang=en)

Haley Jeppson

Ted Laderas
:::
:::

Standing on the shoulders of Building Tidy Tools, rstudio::conf(2020) [@wickham2021a], R Packages [@wickham2020]

## Code of conduct

## Housekeeping

-   Toilets

-   Fire exits and alarms

-   anything else?

## How we will work

-   stickies

-   no stupid questions

## Schedule

 - Function design
 
 - Working with side effects
 
 - Tidy Eval
 
 - Miscellany

## State of play

We want to *concentrate on specific concepts*, rather than writing entire functions.

We have created a set of checkpoints called **states**:

```{r eval=TRUE}
btt22::btt_state()
```

For example, `"2.1.1"` means day **2**, session **1**, task **1**.

## Getting new files

To get *new* files for a state:

```r
# "2.1.1": day 2, session 1, task 1
btt_get("2.1.1")
```

. . . 

- files to directories `R`, `tests/testthat`.
- contains functions, tests that *you* will complete.

## Staying on the "happy path"

One example builds on another, so it's important to keep up.

. . . 

We will do our best to help; in case you need to reset:

```r
btt_reset_hard("2.1.1")
```

. . .

Overwrites:

- directories: `R`, `tests/testthat`
- `Imports`, `Suggests` sections of `DESCRIPTION` 

. . .

## Learning objectives 

At the end of this section you will be able to:
 
 - order and name your function's parameters.
 - recognize type-stable functions and their importance.
 - distinguish a pure function from a function that has or uses side effects.

But first...
 
## Make R CMD CHECK happy {.smaller}

When we finished yesterday:
 
```default
> checking R code for possible problems ... NOTE
  uss_make_matches: no visible binding for global variable ‘tier’
  uss_make_matches: no visible binding for global variable ‘Season’
  uss_make_matches: no visible binding for global variable ‘Date’
  uss_make_matches: no visible binding for global variable ‘home’
  uss_make_matches: no visible binding for global variable ‘visitor’
  uss_make_matches: no visible binding for global variable ‘hgoal’
  uss_make_matches: no visible binding for global variable ‘vgoal’
  Undefined global functions or variables:
    Date Season hgoal home tier vgoal visitor

0 errors ✓ | 0 warnings ✓ | 1 note x
``` 

. . .

Where does `tier`, etc. come from?

. . . 

- We know it's a column in a data frame, but R doesn't know that.

- How to specify "this comes from a data frame" ? 

## Preview of tidy eval

The {rlang} package provides pronouns.

. . . 

Interactively, we might write:

```r
mtcars |>
  mutate(consumption = 235.215 / mpg)
```

. . .

In a package function, we would write:

```r
mtcars |>
  dplyr::mutate(consumption = 235.215 / .data$mpg)
```

## Your turn

1. Add the {rlang} package:

```r
usethis::use_package("rlang")
```

2. Import the `.data` pronoun:

```r
# adds to R/ussie-package.R
usethis::use_import_from("rlang", ".data")
```

3. `R/matches.R`: use `.data` in `uss_make_matches()`.

4. `devtools::check()`, should be happy now.

## API design

## Make a function
 
## Pure functions vs. side effects

## References {.smaller}

