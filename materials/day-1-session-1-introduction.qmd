---
title: "üëã <br>The Whole Game"
subtitle: "üì¶ Building tidy tools: Day 1 Session 1"
author: "Emma Rand and Ian Lyttle"
date: "<br>üîó [bit.ly/...](https://bit.ly/..)"
format:
  revealjs: 
    theme: [simple, emma.scss]
    slide-number: true
    chalkboard: true
    preview-links: auto
    footer: <https://bit.ly/..>
    margin: 0.07
    code-link: true
execute:
  echo: true
  eval: false
bibliography: references.bib
---

# Welcome

## Introductions

This is a two-day, hands-on workshop for those who have embraced the tidyverse and want to build their own packages.

-   Have you written a few of your own R functions?
-   Are you ready to start sharing your code (or data) through R packages?
-   Are you curious what you can do to make your first R packages easy for your users to use, and for you to maintain?

## The team

::: columns
::: {.column width="50%"}
Emma Rand üê¶[er13_r](https://twitter.com/er13_r?lang=en)

Elliot Murphy

Beatriz Milz
:::

::: {.column width="50%"}
Ian Lyttle

Haley Jeppson

Ted Laderas
:::
:::

Standing on the shoulders of Building Tidy Tools, rstudio::conf(2020) [@wickham2021a], R Packages [@wickham2020]

## Housekeeping

-   Toilets

-   Fire exits and alarms

-   anything else?

## Prerequisites

To get the most out of this workshop you will need a laptop with the following installed:

-   R and RStudio
-   R package development toolchain: Rtools(windows) or XCode (mac) or r-base-dev
-   The following packages: `devtools` and TO ADD WHEN FINALISED
-   Git
-   GitHub account
-   GitHub to be linked to RStudio

Detailed instructions for installing these are covered in [Prerequisites](https://rstudio-conf-2022.github.io/build-tidy-tools/materials/pre-reqs.html)

## Schedule

to add from readme when complete

## Code of Conduct

## How we will work

-   stickies

-   no stupid questions

-   

## Learning Objectives {.smaller}

At the end of this section you will be able to:

-   explain the rationale for writing packages
-   find and explore their own package library/libraries
-   describe the key components of a minimal package
-   describe the different states a package can be in
-   outline the development of a package using `devtools`
-   create a simple version controlled package with a remote repo on GitHub
-   use the package interactively with `devtools::load_all()`
-   check package validity with `devtools::check()`

# Why make a package?

## Why make a package

## Script vs package

::: columns
::: {.column width="35%"}
### Script

-   one-off data analysis
-   defined by `.R` extension
-   `library()` calls
-   documentation in \# comments
-   `source()`
:::

::: {.column width="65%"}
### Package

-   defines reusable components
-   defined by presence of `DESCRIPTION` file
-   Required packages specified in `DESCRIPTION`, made available in `NAMESPACE` file
-   documentation in files and `Roxygen` comments
-   Install and restart
:::
:::

## Be nice to future you

![Future self: CC-BY-NC, by Julen Colomb, derived from Randall Munroe cartoon](images/future_you.png){fig-alt="Person working at a computer with an offstage person asking \"How is the analysis going?\" The person at the computer replies \"Can't understand the data...and the data collector does not answer my emails or calls\" Person offstage: \"That's terrible! So cruel! Who did collect the data? I will sack them!\" Person at the computer: \"um...I did, 3 years ago\""}

## To avoid

<iframe src="https://giphy.com/embed/M11UVCRrc0LUk" width="480" height="277" frameBorder="0" class="giphy-embed" allowFullScreen>

</iframe>

<p>

<a href="https://giphy.com/gifs/M11UVCRrc0LUk">via GIPHY</a>

</p>

# Where packages come from and live?

## Where do R packages come from?

CRAN:

```{r}
install.packages("praise")
```

GitHub:

```{r}
remotes::install_github("rladies/praise")
```

Bioconductor

```{r}
BiocManager::install("celaref")
```

## Where do packages live?

In a library! In

```{r}
#| eval: true
R.home()
```

The R home directory is the top-level directory of your R installation.

Note: this is **not** the same as your working directory or your home directory.

## Your R installation

```{r}
#| eval: true
list.files(R.home())
```

## Your library

```{r}
#| eval: true
.Library
```

## Your library

```{r}
#| eval: true
dir(.Library)
```

# Explore a package

## The ussie package

Where we are going. discuss soem of the files

# Package states

## Package states

There are five states a package can be in:

-   source

-   bundled

-   binary

-   installed

-   in-memory

::: aside
Having a understanding of the different states a package can be helpful in understanding package development.
:::

## Package states

![Schematic of package states](images/installation.png){fig-alt="schematic of package states and the functions that move them between states. One the horizontal axis: source, bundle, binary, installed, in memory. One the vertical axis the functions install.packages, R CMD install, install, build, install_github"}

::: aside
Figure from [R Packages](https://r-pkgs.org/) [@wickham2020]
:::

## Package states

::: columns
::: {.column width="40%"}
-   ::: {style="background-color: #707070"}
    source
    :::

-   bundled

-   binary

-   installed

-   in-memory
:::

::: {.column width="60%" style="background-color: #707070"}
What you create and work on.

Specific directory structure with some particular components e.g., `DESCRIPTION`, an `R/` directory.
:::
:::

## Package states

::: columns
::: {.column width="40%"}
-   source

-   ::: {style="background-color: #707070"}
    bundled
    :::

-   binary

-   installed

-   in-memory
:::

::: {.column width="60%" style="background-color: #707070"}
Also known as "source tarballs".

Package files compressed to single file.

Conventionally `.tar.gz`

You don't normally need to make one.

Unpacked it looks very like the source package
:::
:::

## Package states

::: columns
::: {.column width="40%"}
-   source

-   bundled

-   ::: {style="background-color: #707070"}
    binary
    :::

-   installed

-   in-memory
:::

::: {.column width="60%" style="background-color: #707070"}
Package distribution for users w/o dev tools

Also a single file

Platform specific: `.tgz` (Mac) `.zip` (Windows)

Package developers submit a bundle to CRAN; CRAN makes and distributes binaries

`install.packages()`
:::
:::

## Package states

::: columns
::: {.column width="40%"}
-   source

-   bundled

-   binary

-   ::: {style="background-color: #707070"}
    installed
    :::

-   in-memory
:::

::: {.column width="60%" style="background-color: #707070"}
A binary package that's been decompressed into a package library

Command line tool `R CMD INSTALL` powers all package installation
:::
:::

## Package states

::: columns
::: {.column width="40%"}
-   source

-   bundled

-   binary

-   installed

-   ::: {style="background-color: #707070"}
    in-memory
    :::
:::

::: {.column width="60%" style="background-color: #707070"}
If a package is installed, `library()` makes its function available by loading the package into memory and attaching it to the search path.

We do not use `library()` for packages we are working on

`devtools::load_all()` loads a source package directly into memory.
:::
:::

# Create a package!

## Create a package

Be deliberate about where you create your package

Do not nest inside another RStudio project, R package or git repo.

üé¨ Create a package:

```{r}
usethis::create_package("~/Desktop/ussie")
```

::: aside
You may want a different path
:::

##  {.smaller}

```{r}
‚àö Creating 'C:/Users/er13/Desktop/ussie/'
‚àö Setting active project to 'C:/Users/er13/Desktop/ussie'
‚àö Creating 'R/'
‚àö Writing 'DESCRIPTION'
Package: ussie
Title: What the Package Does (One Line, Title Case)
Version: 0.0.0.9000
Authors\@R (parsed):
   * First Last \<first.last\@example.com\> \[aut, cre\] (YOUR-ORCID-ID)
Description: What the package does (one paragraph).
License: \`use_mit_license()\`, \`use_gpl3_license()\` or friends to
    pick a license
Encoding: UTF-8
LazyData: true
Roxygen: list(markdown = TRUE)
RoxygenNote: 7.1.1
‚àö Writing 'NAMESPACE'
‚àö Writing 'ussie.Rproj'
‚àö Adding '.Rproj.user' to '.gitignore'
‚àö Adding '\^ussie\\\\.Rproj\$', '\^\\\\.Rproj\\\\.user\$' to '.Rbuildignore'
‚àö Opening 'C:/Users/er13/Desktop/ussie/' in new RStudio session
‚àö Setting active project to '\<no active project\>'
```

## `create_package()`

What happens when we run `create_package()`?

-   R will create a folder called `ussie` which is a package and an RStudio project

-   restart R in the new project

-   create some infrastructure for your package

-   start the RStudio Build pane

::: aside
continued.....
:::

## `create_package()`

What happens when we run `create_package()`?

-   `ussie.Rproj` is the file that makes this directory an RStudio Project.

-   `DESCRIPTION` provides metadata about your package.

-   The `R/` directory is where we will put `.R` files with function definitions.

-   `NAMESPACE` declares the functions your package exports for external use and the external functions your package imports from other packages.

::: aside
continued.....
:::

## `create_package()`

What happens when we run `create_package()`?

-   `.Rbuildignore` lists files that we need but that should not be included when building the R package from source.

-   `.gitignore` anticipates Git usage and ignores some standard, behind-the-scenes files created by R and RStudio.

## Add a function

Functions will go in an `.R` file.

There's a `usethis` helper for adding `.R` files!

```{r}
usethis::use_r("file_name")
```

`usethis::use_r()` adds the file extension and saves in `R/` folder

## `usethis::use_r()`

üé¨ Create a new R file in your package called `animal_sounds.R`

. . .

```{r}
usethis::use_r("animal_sounds")
```

. . .

```{r}
#| code-line-numbers: "|3"
‚àö Setting active project to 'C:/Users/er13/Desktop/ussie'
‚Ä¢ Modify 'R/animal_sounds.R'
‚Ä¢ Call \`use_test()\` to create a matching test file
```

## Add the function

üé¨ Put the following code into your script:

```{r}
#| code-line-numbers: "|2-4"
animal_sounds <- function(animal, sound) {
  assertthat::assert_that(
    assertthat::is.string(animal),
    assertthat::is.string(sound)
  )
  paste0("The ", animal, " goes ", sound, "!")
}
```

# Test your function

## Development workflow

In a normal script you might use:

```{r}
source("R/animal_sounds.R")
```

. . .

but when building packages we use a `devtools` approach

## Development workflow

![Development workflow](images/dev_cycle_before_testing.png){fig-alt="there are three boxes with arrow joining them clockwise. The boxes are (clockwise from 3' oclock) 'devtools::load_all() Cmd/Ctrl + Shift +L', 'Explore in console' and 'Modify code'"}

# Load your package

## `devtools::load_all()`

üé¨ Load package with `devtools::load_all()`.

```{r}
devtools::load_all()
```

    Loading ussie

## Test

Test the `animal_sounds()` function in the console.

```{r}
animal_sounds("dog", "woof")
```

    [1] "The dog goes woof!"

## `devtools::load_all()`

üé¨ Change some tiny thing about your function - maybe the animal "says" instead of "goes"?

. . .

üé¨ Load with `devtools::load_all()` and test the updated function.

# Check your package

## Check your package

`R CMD check` is the gold standard for checking that an R package is in full working order.

It is a programme that is executed in the shell.

However, `devtools` has the `check()` function to allow you to run this without leaving your R session.

## `devtools::check()`

üé¨ Check your package

```{r}
devtools::check()
```

## `devtools::check()`

You will get lots of output ending with:

```{r}
#| code-line-numbers: "|4-7|9-10"
-- R CMD check results -------------------- ussie 0.0.0.9000 ----
  Duration: 12.5s
> checking DESCRIPTION meta-information ... WARNING
  Non-standard license specification:
    `use_mit_license()`, `use_gpl3_license()` or friends to pick a license
  Standardizable: FALSE
> checking dependencies in R code ... WARNING
  '::' or ':::' import not declared from: 'assertthat'
0 errors ‚àö | 2 warnings x | 0 notes ‚àö
```

## Aside: in case of error

On running `devtools::check()` you may get an error if you are using a networked drive.

    Updating ussie documentation  
    Error: The specified file is not readable: path-to\ussie\NAMESPACE

This is covered [here](https://stackoverflow.com/questions/40530968/overwriting-namespace-and-rd-with-roxygen2) and can be fixed.

## Aside: in case of error

Save a copy of this file:

[fix_for_networked_drives.R](https://forwards.github.io/workshops/package-dev-modules/slides/03-your-first-package/fix_for_networked_drives.R)

Save it somewhere other than the `ussie` directory

Open the file from the `ussie` project session

Run the whole file

You should now find that `devtools::check()` proceeds normally

# License

## Add a license

`usethis` helps out again! `use_mit_license()`, `use_agpl_license()`, `use_ccby_license()` etc

üé¨ Add a MIT license[^1] - use your own name!

[^1]: MIT: Simple and permissive license that lets people use and freely distribute your code

```{r}
usethis::use_mit_license("Emma Rand") 
```

. . .

üé¨ What files have appeared?

üé¨ How has the `DESCRIPTION` file changed?

üé¨ Run `devtools::check()` again. Has one of the warnings disappeared?

# Document your package

## Levels of package documentation

-   Metadata: The `DESCRIPTION` file -- an overview of "what's in this package?"

-   Object documentation: Documentation for each of the exported functions and datasets in the package, along with examples of usage

-   Vignettes: Long form documentation, generally discussing how to use a number of functions from the - package together and/or how a package fits into a larger ecosystem of packages

-   pkgdown sites: Websites for your package!

## Metadata in `DESCRIPTION` {.smaller}

-   Title: One line, title case, with no period. Fewer than 65 characters.

-   Version

    -   for release: MAJOR.MINOR.PATCH version.
    -   for development version building on version MAJOR.MINOR.PATCH, use: MAJOR.MINOR.PATCH.9000

-   Authors\@R: "aut" means author, "cre" means creator, "ctb" means contributor.

-   Description: One paragraph describing what the package does. Keep the width of the paragraph to 80 characters; indent subsequent lines with 4 spaces.

-   License

-   Encoding: How to encode text, use UTF-8 encoding.

-   LazyData: Use true to lazy-load data sets in the package.

## Update `DESCRIPTION`

üé¨ Add a title and description.

üé¨ Add yourself as an author and creator.

## Object documentation

Object documentation is what you see when you use `?` or `help()` to find out more about a function or a dataset in a package.

We will create object documentation using Roxygen comments, which start with #'

Much of the work is done by the `roxygen2` package, but we won't directly run `roxygen2` functions, instead run functions from devtools that call them

## Object documentation workflow

-   Add roxygen comments to your .R files.

-   Run `devtools::document()` to convert roxygen comments to .Rd files.

-   Load the current version of the package with `devtools::load_all()`

-   Preview documentation with `?`

-   Rinse and repeat until the documentation looks the way you want.

## Document your function

üé¨ Open animal_sounds.R

üé¨ Go to Code \> Insert Roxygen Documentation

üé¨ Fill in the documentation: Give your function a title, then, in a new paragraph, a brief description, define the two parameters, and finally, describe what the function returns

üé¨ Save `animal_sounds.R`, run `devtools::document()` followed by `devtools::load_all()`

üé¨ Preview the documentation with `?animal_sounds` and edit your documentation if anything needs to be changed

## Add examples

üé¨ Under `@examples`, add one example for using your function

üé¨ Save `animal_sounds.R`, run `devtools::document()` followed by `devtools::load_all()`

üé¨ Preview the documentation with `?animal_sounds` and edit your documentation if anything needs to be changed

# üì¶ Woo hooüì¶ <BR> You made a package!

## Summary {.smaller}

-   It is useful to make a package
    -   it is fairly easy with `devtools`
    -   it will help you work more reproducibly
-   Packages can be in one of 5 states:
    -   source - what you write
    -   bundled - source compressed to single file, submitted to CRAN
    -   binary - distribution for users w/o `devtools`
    -   installed - a binary that's been decompressed
    -   in-memory - installed package that has been loaded

## Summary continued {.smaller}

-   A minimal package comprises
    -   a folder which is a package and a RProj
    -   `DESCRIPTION`, `NAMESPACE`, `.Rbuildignore` `.gitignore`
    -   `R/` directory for functions
-   We add functions with `usethis:use_r()`
-   We use the package interactively with `devtools::load_all()`
-   We use `devtools::check()` to execute `R CMD` check
-   We add a license with `usethis::use_mit_license()`
-   We add documentation using **`roxygen2`** and `devtools::document()`

## References {.smaller}
